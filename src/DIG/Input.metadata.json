{
  "description": "A text input component.\n\n### Example\n\n```jsx\nState.init({\n  myValue: \"\",\n});\n\nreturn (\n  <Widget\n    src=\"near/widget/DIG.Input\"\n    props={{\n      assistiveText: \"My assistive text\",\n      label: \"My Label\",\n      iconLeft: \"ph-bold ph-pizza\",\n      placeholder: \"Placeholder...\",\n      onInput: (e) => State.update({ myValue: e.target.value }),\n      value: state.myValue,\n    }}\n  />\n);\n\n```\n\n### Props\n\n`assistiveText`\n- type: string\n- Adds assistive text to the bottom of the input. Useful for info, success, and error messages.\n\n`disabled`\n- type: boolean\n- Disables the input\n\n`iconLeft`\n- type: string (CSS Class)\n- example: `\"ph-bold ph-anchor-simple\"`\n- https://phosphoricons.com\n- Adds an icon inside the left of the input\n\n`iconRight`\n- type: string (CSS Class)\n- example: `\"ph-bold ph-anchor-simple\"`\n- https://phosphoricons.com\n- Adds an icon inside the right of the input\n\n`invalid`\n- type: boolean\n- Renders input with error variant\n\n`label`\n- type: string\n- Renders label above input\n\n`onInput`\n- type: function\n- Other DOM events like `onKeyDown` are also supported.\n\n`valid`\n- type: boolean\n- Renders input with success variant\n\n### HTML Attributes\n\nAll other props will be forwarded through to the `<input>` element. EG: `type`, `value`, `placeholder`.",
  "name": "DIG.Input",
  "tags": {
    "dig": ""
  }
}
